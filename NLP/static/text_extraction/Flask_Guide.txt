Flask#flask Table of ContentsAbout1Chapter 1: Getting started with Flask2Remarks2Versions2Examples2Installation - Stable2Hello World3Installation - Latest3Installation - Development3sphinx3py.test4tox4Chapter 2: Accessing request data5Introduction5Examples5Accessing query string5Combined form and query string5Accessing form fields6Chapter 3: Authorization and authentication7Examples7Using flask-login extension7General idea7Create a LoginManager7Specify a callback used for loading users7A class representing your user8Logging the users in8I have logged in a user, what now?9Logging users out10What happens if a user is not logged in and I access the current_user object?10 What next?10Timing out the login session11Chapter 4: Blueprints12Introduction12Examples12A basic flask blueprints example12Chapter 5: Class-Based Views14Examples14Basic example14Chapter 6: Custom Jinja2 Template Filters15Syntax15Parameters15Examples15Format datetime in a Jinja2 template15Chapter 7: Deploying Flask application using uWSGI web server with Nginx16Examples16Using uWSGI to run a flask application16Installing nginx and setting it up for uWSGI17Enable streaming from flask18Set up Flask Application, uWGSI, Nginx - Server Configurations boiler template (default, p19Chapter 8: File Uploads24Syntax24Examples24Uploading Files24HTML Form24Python Requests24Save uploads on the server25Passing data to WTForms and Flask-WTF25PARSE CSV FILE UPLOAD AS LIST OF DICTIONARIES IN FLASK WITHOUT SAVING26Chapter 9: Flask on Apache with mod_wsgi28Examples28 WSGI Application wrapper28Apache sites-enabled configuration for WSGI28Chapter 10: Flask-SQLAlchemy30Introduction30Examples30Installation and Initial Example30Relationships: One to Many30Chapter 11: Flask-WTF32Introduction32Examples32A simple Form32Chapter 12: Message Flashing33Introduction33Syntax33Parameters33Remarks33Examples33Simple Message Flashing33Flashing With Categories34Chapter 13: Pagination35Examples35Pagination Route Example with flask-sqlalchemy Paginate35Rendering pagination in Jinja35Chapter 14: Redirect37Syntax37Parameters37Remarks37Examples37Simple example37Passing along data37Chapter 15: Rendering Templates39 Syntax39Examples39render_template Usage39Chapter 16: Routing41Examples41Basic Routes41Catch-all route42Routing and HTTP methods43Chapter 17: Sessions44Remarks44Examples44Using the sessions object within a view44Chapter 18: Signals46Remarks46Examples46Connecting to signals46Custom signals46Chapter 19: Static Files48Examples48Using Static Files48Static Files in Production (served by frontend webserver)49Chapter 20: Testing52Examples52Testing our Hello World app52Introduction52Defining the test52Running the test53Testing a JSON API implemented in Flask53Testing this API with pytest53Accessing and manipulating session variables in your tests using Flask-Testing54Chapter 21: Working with JSON57 Examples57Return a JSON Response from Flask API57Try it with curl57Other ways to use jsonify()57Receiving JSON from an HTTP Request57Try it with curl58Credits59 AboutYou can share this PDF with anyone you feel could benefit from it, downloaded the latest version from: flaskIt is an unofficial and free Flask ebook created for educational purposes. All the content is extracted from Stack Overflow Documentation, which is written by many hardworking individuals at Stack Overflow. It is neither affiliated with Stack Overflow nor official Flask.The content is released under Creative Commons BY-SA, and the list of contributors to each chapter are provided in the credits section at the end of this book. Images may be copyright of their respective owners unless otherwise specified. All trademarks and registered trademarks are the property of their respective company owners.Use the content presented in this book at your own risk; it is not guaranteed to be correct nor accurate, please send your feedback and corrections to info@zzzprojects.comhttps://riptutorial.com/1 Chapter 1: Getting started with FlaskRemarksFlask is a Python web application micro-framework built on top of the Werkzeug WSGI library. Flask may be "micro", but it™s ready for production use on a variety of needs.The "micro" in micro-framework means Flask aims to keep the core simple but extensible. Flask won™t make many decisions for you, such as what database to use, and the decisions that it does make are easy to change. Everything is up to you, so that Flask can be everything you need and nothing you don't.The community supports a rich ecosystem of extensions to make your application more powerful and even easier to develop. As your project grows you are free to make the design decisions appropriate for your requirements.VersionsVersionCode NameRelease Date0.12Punsch2016-12-210.11Absinthe2016-05-290.10Limoncello2013-06-13ExamplesInstallation - StableUse pip to install Flask in a virtualenv.Step by step instructions for creating a virtualenv for your project:Never use  unless you understand exactly what you're doing. Keep your project in a local virtualenv, do not install to the system Python unless you are using the system package https://riptutorial.com/2 manager.Hello WorldCreate :Then run it with:Adding the code below will allow running it directly with .Installation - LatestIf you want to use the latest code, you can install it from the repository. While you potentially get new features and fixes, only numbered releases are officially supported.Installation - DevelopmentIf you want to develop and contribute to the Flask project, clone the repository and install the code in development mode.There are some extra dependencies and tools to be aware of as well.sphinxhttps://riptutorial.com/3 Used to build the documentation.py.testUsed to run the test suite.toxUsed to run the test suite against multiple Python versions.Note that tox only uses interpreters that are already installed, so if you don't have Python 3.3 installed on your path, it won't be tested.Read Getting started with Flask online: https://riptutorial.com/flask/topic/790/getting-started-with-flaskhttps://riptutorial.com/4 Chapter 2: Accessing request dataIntroductionWhen working with an web application it's sometimes important to access data included in the request, beyond the URL.In Flask this is stored under the global request object, which you can access in your code via .ExamplesAccessing query stringThe query string is the part of a request following the URL, preceded by a  mark.Example: For this example, we are making a simple echo webserver that echos back everything submitted to it via the  field in  requests.Example: Flask Example:Combined form and query stringFlask also allows access to a CombinedMultiDict that gives access to both the  and  attributes under one variable.This example pulls data from a form field  submitted along with the  field in the query string.Flask Example:https://riptutorial.com/5 Accessing form fieldsYou can access the form data submitted via a  or  request in Flask via the  attribute.Read Accessing request data online: https://riptutorial.com/flask/topic/8622/accessing-request-datahttps://riptutorial.com/6 Chapter 3: Authorization and authenticationExamplesUsing flask-login extensionOne of the simpler ways of implementing an authorization system is using the flask-login extension. The project's website contains a detailed and well-written quickstart, a shorter version of which is available in this example.General ideaThe extension exposes a set of functions used for:logging users inŁlogging users outŁchecking if a user is logged in or not and finding out which user is thatŁWhat it doesn't do and what you have to do on your own:doesn't provide a way of storing the users, for example in the databaseŁdoesn't provide a way of checking user's credentials, for example username and passwordŁBelow there is a minimal set of steps needed to get everything working.I would recommend to place all auth related code in a separate module or package, for example . That way you can create the necessary classes, objects or custom functions separately.Create a The extension uses a  class which has to be registered on your  application object.As mentioned earlier  can for example be a global variable in a separate file or package. Then it can be imported in the file in which the  object is created or in your application factory function and initialized.Specify a callback used for loading usershttps://riptutorial.com/7 A users will normally be loaded from a database. The callback must return an object which represents a user corresponding to the provided ID. It should return  if the ID is not valid.This can be done directly below creating your .A class representing your userAs mentioned the  callback has to return an object which represent a user. What does that mean exactly? That object can for example be a wrapper around user objects stored in your database or simply directly a model from your database. That object has to implement the following methods and properties. That means that if the callback returns your database model you need to ensure that the mentioned properties and methods are added to your model.This property should return  if the user is authenticated, i.e. they have provided valid credentials. You will want to ensure that the objects which represent your users returned by the  callback return  for that method.ŁThis property should return True if this is an active user - in addition to being authenticated, they also have activated their account, not been suspended, or any condition your application has for rejecting an account. Inactive accounts may not log in. If you don't have such a mechanism present return  from this method.ŁThis property should return True if this is an anonymous user. That means that your user object returned by the  callback should return .ŁThis method must return a unicode that uniquely identifies this user, and can be used to load the user from the  callback. Note that this must be a unicode - if the ID is natively an int or some other type, you will need to convert it to unicode. If the  callback returns objects from the database this method will most likely return the database ID of this particular user. The same ID should of course cause the  callback to return the same user later on.ŁIf you want to make things easier for yourself (**it is in fact recommended) you can inherit from  in the object returned by the  callback (presumably a database model). You can see how those methods and properties are implemented by default in this mixin here.https://riptutorial.com/8 Logging the users inThe extension leaves the validation of the username and password entered by the user to you. In fact the extension doesn't care if you use a username and password combo or other mechanism. This is an example for logging users in using username and password.In general logging users in is accomplished by calling login_user and passing an instance of an object representing your user mentioned earlier to it. As shown this will usually happen after retrieving the user from the database and validating his credentials, however the user object just magically appears in this example.I have logged in a user, what now?The object returned by the  callback can be accessed in multiple ways.In templates:The extension automatically injects it under the name  using a template context processor. To disable that behaviour and use your custom processor set  in your  constructor.ŁIn Python code:The extension provides a request-bound object called .Łhttps://riptutorial.com/9 Limiting access quickly using a decorator A  decorator can be used to limit access quickly.ŁLogging users outUsers can be logged out by calling . It appears that it is safe to do so even if the user is not logged in so the  decorator can most likely be ommited.What happens if a user is not logged in and I access the  object?By defult an AnonymousUserMixin is returned: and  are Ł is Ł returns ŁTo use a different object for anonymous users provide a callable (either a class or factory function) that creates anonymous users to your  with:https://riptutorial.com/10 What next?This concludes the basic introduction to the extension. To learn more about configuration and additional options it is highly recommended to read the official guide.Timing out the login sessionIts good practice to time out logged in session after specific time, you can achieve that with Flask-Login.Default session lifetime is 31 days, user need to specify the login refresh view in case of timeout.Above line will force user to re-login every 5 minutes.Read Authorization and authentication online: https://riptutorial.com/flask/topic/9053/authorization-and-authenticationhttps://riptutorial.com/11 Chapter 4: BlueprintsIntroductionBlueprints are a powerful concept in Flask application development that allow for flask applications to be more modular and be able to follow multiple patterns. They make administration of very large Flask applications easier and as such can be used to scale Flask applications. You can reuse Blueprint applications however you cannot run a blueprint on its own as it has to be registered on your main application.ExamplesA basic flask blueprints exampleA minimal Flask application looks something like this:A large Flask application can separate one file into multiple files by .PurposeMake it easier for others to maintain the application.Folder Structure of Large Applicationviews/index.pyhttps://riptutorial.com/12 app.pyRun applicationRead Blueprints online: https://riptutorial.com/flask/topic/6427/blueprintshttps://riptutorial.com/13 Chapter 5: Class-Based ViewsExamplesBasic exampleWith Class-Based Views, we use classes instead of methods to implement our views. A simple example of using Class-Based Views looks as follows:Read Class-Based Views online: https://riptutorial.com/flask/topic/7494/class-based-viewshttps://riptutorial.com/14 Chapter 6: Custom Jinja2 Template FiltersSyntax{{ my_date_time|my_custom_filter }}Ł{{ my_date_time|my_custom_filter(args) }}ŁParametersParameterDetailsvalueThe value passed in by Jinja, to be filteredargsExtra arguments to be passed into the filter functionExamplesFormat datetime in a Jinja2 templateFilters can either be defined in a method and then added to Jinja's filters dictionary, or defined in a method decorated with .Defining and registering later:Defining with decorator:Read Custom Jinja2 Template Filters online: https://riptutorial.com/flask/topic/1465/custom-jinja2-template-filtershttps://riptutorial.com/15 Chapter 7: Deploying Flask application using uWSGI web server with NginxExamplesUsing uWSGI to run a flask applicationThe built-in  server certainly is not suitable for running production servers. The most obvious reason is the fact that the  server is single-threaded and thus can only handle one request at a time.Because of this we want to use the uWSGI Server to serve our application instead. In this example we will install uWSGI and run a simple test application with it.Installing uWSGI:It is as simple as that. If you are unsure about the python version your pip uses make it explicit:Now let's create a simple test application:In flask the conventional name for the application is  but uWSGI looks for  by default. That's why we create an alias for our app in the last line.Now it is time to run the app:You should see the message "Hello uWSGI ..." by pointing your browser to https://riptutorial.com/16 In order not to type in the full command everytime we will create a  file to store that configuration:The  and  options are the same as in the manual command. But there are three more options:: It is recommended to turn this on because it might interfere with the next optionŁ: This needs to be turned on if you are using additional threads in your application. We don't use them right now but now we don't have to worry about it.Ł: Master mode should be enable for various reasonsŁNow we can run the app with this command:Installing nginx and setting it up for uWSGINow we want to install nginx to serve our application.Then we create a configuration for our websiteThis tells nginx to listen on port 80 (default for http) and serve something at the root path (). There https://riptutorial.com/17 we tell nginx to simply act as a proxy and pass every request to a socket called  located in .Let's enable the site:You might want to remove the default configuration if it is enabled:Then restart nginx:Point your browser to  and you will see an error: .This means that nginx is up and working but the socket is missing. So lets create that.Go back to your  file and open it. Then append these lines:The first line tells uwsgi to create a socket at the given location. The socket will be used to receive requests and send back the responses. In the last line we allow other users (including nginx) to be able to read and write from that socket.Start uwsgi again with . Now point your browser again to  and you will see the "Hello uWSGI" greeting again.Note that you still can see the response on  because uWSGI now serves the application via http and the socket. So let's disable the http option in the ini fileNow the app can only be accessed from nginx (or reading that socket directly :) ).Enable streaming from flaskFlask has that feature which lets you stream data from a view by using generators.Let's change the  fileadd Ładd Ładd Łhttps://riptutorial.com/18 create a new view:ŁNow open your browser at . The site will load forever because nginx waits until the response is complete. In this case the response will never be complete because it will send the current date and time forever.To prevent nginx from waiting we need to add a new line to the configuration.Edit The line  tells nginx not to wait until a response it complete.Restart nginx:  and look at  again.Now you will see that every second a new line pops up.Set up Flask Application, uWGSI, Nginx - Server Configurations boiler template (default, proxy and cache)This is a porting of set up sourced from DigitalOcean's tutorial of How To Serve Flask Applications with uWSGI and Nginx on Ubuntu 14.04and some useful git resources for nginx servers.Flask ApplicationThis tutorial assume you use Ubuntu.locate  folder.1. Create your web app folder 2. 3. optional You may want to set up virtual environment for deploying web applications on production https://riptutorial.com/19 server.to install virtual environment.to set up virtual environment for your app.to activate your environment. Here you will install all python packages.end optional but recommendedSet up flask and gateway uWSGIInstall flask and uSWGI gateway:Example of flask app in myexample.py:Create file to communicate between your web app and the web server: gateway interface [https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface]then import your webapp module and make it run from the gateway entry point.To test uWSGI:https://riptutorial.com/20 To configure uWSGI:Create a configuration file 1. Basic configuration for gateway uWSGI2. optional if you are using virtual env You can  your virtual environment.Nginx configuration We are gonna use nginx as:default server to pass request to the socket, using uwsgi protocol1. proxy-server in front of default server2. cache server to cache successful requests (as example, you may want to cache GET requests if your web application)3. Locate your  directory and create a configuration file for your application:Add following block, in comments what it does:https://riptutorial.com/21 Finally, link the file to  directory. For an explanation of available and enabled sites, see answer: [http://serverfault.com/a/527644]You are done now with nginx. However, you may want to check out this very precious boiler template: [https://github.com/h5bp/server-configs-nginx]https://riptutorial.com/22 Very useful for fine tuning.Now test Nginx:Launch Nginx:Automate Ubuntu to start uWSGI The last thing is to make Ubuntu start the wsgi gateway communicating with your application, otherwise you should do it manually.Locate directory for initialisation scripts in Ubuntu, and create a new script:1. Add following block, comments in line to explain what it does2. Now you can activate your script: sudo start myexampleRead Deploying Flask application using uWSGI web server with Nginx online: https://riptutorial.com/flask/topic/4637/deploying-flask-application-using-uwsgi-web-server-with-nginxhttps://riptutorial.com/23 Chapter 8: File UploadsSyntaxrequest.files['name'] # single required fileŁrequest.files.get('name') # None if not postedŁrequest.files.getlist('name') # list of zero or more files postedŁCombinedMultiDict((request.files, request.form)) # combine form and file dataŁExamplesUploading FilesHTML FormUse a  type input and the browser will provide a field that lets the user select a file to upload.ŁOnly forms with the  method can send file data.ŁMake sure to set the form's  attribute. Otherwise the file's name will be sent but not the file's data.ŁUse the  attribute on the input to allow selecting multiple files for the single field.ŁPython RequestsRequests is a powerful Python library for making HTTP requests. You can use it (or other tools) to post files without a browser.Open the files to read in binary mode.ŁThere are multiple data structures that  takes. This demonstrates a list of  tuples, which allows multiple files like the form above.Łhttps://riptutorial.com/24 This is not meant to be an exhaustive list. For examples using your favorite tool or more complex scenarios, see the docs for that tool.Save uploads on the serverUploaded files are available in , a  mapping field names to file objects. Use  Š instead of  or  Š if multiple files were uploaded with the same field name.The objects in  have a  method which saves the file locally. Create a common directory to save the files to.The  attribute is the name the file was uploaded with. This can be set arbitrarily by the client, so pass it through the  method to generate a valid and safe name to save as. This doesn't ensure that the name is unique, so existing files will be overwritten unless you do extra work to detect that.Passing data to WTForms and Flask-WTFWTForms provides a  to render a file type input. It doesn't do anything special with the uploaded data. However, since Flask splits the form data () and the file data (), you need to make sure to pass the correct data when creating the form. You can https://riptutorial.com/25 use a  to combine the two into a single structure that WTForms understands.If you're using Flask-WTF, an extension to integrate Flask and WTForms, passing the correct data will be handled for you automatically.Due to a bug in WTForms, only one file will be present for each field, even if multiple were uploaded. See this issue for more details. It will be fixed in 3.0.PARSE CSV FILE UPLOAD AS LIST OF DICTIONARIES IN FLASK WITHOUT SAVINGDevelopers often need to design web sites that allow users to upload a CSV file. Usually there is no reason to save the actual CSV file since the data will processed and/or stored in a database once uploaded. However, many if not most, PYTHON methods of parsing CSV data requires the data to be read in as a file. This may present a bit of a headache if you are using FLASK for web development.Suppose our CSV has a header row and looks like the following:Now, suppose the html form to upload a file is as follows:Since no one wants to reinvent the wheel you decide to IMPORT csv into your FLASK script. There is no guarantee that people will upload the csv file with the columns in the correct order. If the csv file has a header row, then with the help of the csv.DictReader method you can read the CSV file as a list of dictionaries, keyed by the entries in the header row. However, csv.DictReader needs a file and does not directly accept strings. You may think you need to use FLASK methods to first save the uploaded file, get the new file name and location, open it using csv.DictReader, and then delete the file. Seems like a bit of a waste.Luckily, we can get the file contents as a string and then split the string up by terminated lines. The csv method csv.DictReader will accept this as a substitute to a file. The following code demonstrates how this can be accomplished without temporarily saving the file.https://riptutorial.com/26 The variable csv_dicts is now the following list of dictionaries:In case you are new to PYTHON, you can access data like the following:Other solutions involve importing the io module and use the io.Stream method. I feel that this is a more straightforward approach. I believe the code is a little easier to follow than using the io method. This approach is specific to the example of parsing an uploaded CSV file.Read File Uploads online: https://riptutorial.com/flask/topic/5459/file-uploadshttps://riptutorial.com/27 Chapter 9: Flask on Apache with mod_wsgiExamplesWSGI Application wrapperMany Flask applications are developed in a virtualenv to keep dependencies for each application separate from the system-wide Python installation. Make sure that mod-wsgi is installed in your virtualenv:Then create a wsgi wrapper for your Flask application. Usually it's kept in the root directory of your application.my-application.wsgiThis wrapper activates the virtual environment and all of its installed modules and dependencies when run from Apache, and makes sure the application path is first in the search paths. By convention, WSGI application objects are called .Apache sites-enabled configuration for WSGIThe advantage of using Apache over the builtin werkzeug server is that Apache is multi-threaded, meaning that multiple connections to the application can be made simultaneously. This is especially useful in applications that make use of XmlHttpRequest (AJAX) on the front-end./etc/apache2/sites-available/050-my-application.conf (or default apache configuration if not hosted on a shared webserver)https://riptutorial.com/28 Read Flask on Apache with mod_wsgi online: https://riptutorial.com/flask/topic/6851/flask-on-apache-with-mod-wsgihttps://riptutorial.com/29 Chapter 10: Flask-SQLAlchemyIntroductionFlask-SQLAlchemy is a Flask extension that adds support for the popular Python object relational mapper(ORM) SQLAlchemy to Flask applications. It aims to simplify SQLAlchemy with Flask by providing some default implementations to common tasks.ExamplesInstallation and Initial ExampleInstallationSimple ModelThe code example above shows a simple Flask-SQLAlchemy model, we can add an optional tablename to the model declaration however it is often not necessary as Flask-SQLAlchemy will automatically use the class name as the table name during database creation.Our class will inherit from the baseclass Model which is a configured declarative base hence there is no need for us to explicitly define the base as we would when using SQLAlchemy.ReferencePypi URL: [https://pypi.python.org/pypi/Flask-SQLAlchemy][1]ŁDocumentation URL: [http://flask-sqlalchemy.pocoo.org/2.1/][1]ŁRelationships: One to Manyhttps://riptutorial.com/30 In this example we have two class the User class and the Post class, the User class will be our parent and the Post will be our post as only post can belong to one user but one user can have multiple posts. In order to achieve that we place a Foreign key on the child referencing the parent that is from our example we place a foreign key on Post class to reference the User class. We then use  on the parent which we access via our SQLAlchemy object . That then allows us to reference a collection of items represented by the Post class which is our child.To create a bidirectional relationship we use, this will allow the child to reference the parent.Read Flask-SQLAlchemy online: https://riptutorial.com/flask/topic/10577/flask-sqlalchemyhttps://riptutorial.com/31 Chapter 11: Flask-WTFIntroductionIt is a simple integration of Flask and WTForms. It allows for the easier creation and management of web forms, it automatically generates a CRSF token hidden field in your templates. It also features easy form validation functionsExamplesA simple FormTo render the template you will use something like this:The above simple code will generate our very simple flask-wtf web form with a hidden CRSF token field.Read Flask-WTF online: https://riptutorial.com/flask/topic/10579/flask-wtfhttps://riptutorial.com/32 Chapter 12: Message FlashingIntroductionFlashing message to the template by  function.Syntaxflash(message, category='message')Łflash('hello, world!')Łflash('This is a warning message', 'warning')ŁParametersmessagethe message to be flashed.categorythe message's category, the default is .RemarksTemplate InheritanceŁAPIŁExamplesSimple Message FlashingSet , then flashing message in view function:Then render the messages in  (which the  extended from):https://riptutorial.com/33 Flashing With CategoriesSet second argument when use  in view function:In the template, set  in , then you get a list of tuples in the form of , so you can use category as a HTML class.Read Message Flashing online: https://riptutorial.com/flask/topic/10756/message-flashinghttps://riptutorial.com/34 Chapter 13: PaginationExamplesPagination Route Example with flask-sqlalchemy PaginateIn this example we use a parameter in the route to specify the page number. We set a default of 1 in the function parameter . We have a  object in the database and we query it, ordering in descending order, showing latest users first. We then use the  method of the  object in flask-sqlalchemy. We then pass this to  to be rendered.Rendering pagination in JinjaHere we use the object that we passed to  to display the pages, the current active page, and also a previous and next buttons if you can go to the previous/next page.https://riptutorial.com/35 Read Pagination online: https://riptutorial.com/flask/topic/6460/paginationhttps://riptutorial.com/36 Chapter 14: RedirectSyntaxredirect(location, code, Response)ŁParametersParameterDetailslocationThe location the response should redirect to.code(Optional) The redirect status code, 302 by default. Supported codes are 301, 302, 303, 305, and 307.Response(Optional) A Response class to use when instantiating a response. The default is werkzeug.wrappers.Response if unspecified.RemarksThe location parameter must be a URL. It can be input raw, such as 'http://www.webpage.com' or it can be built with the url_for() function.ExamplesSimple examplePassing along datahttps://riptutorial.com/37 Read Redirect online: https://riptutorial.com/flask/topic/6856/redirecthttps://riptutorial.com/38 Chapter 15: Rendering TemplatesSyntaxŁExamplesrender_template UsageFlask lets you use templates for dynamic web page content. An example project structure for using templates is as follows::Note that you can pass dynamic content from your route handler to the template by appending key/value pairs to the render_templates function. In the above example, the "pagetitle" and "mycontent" variables will be passed to the template for inclusion in the rendered page. Include these variables in the template by enclosing them in double braces: :When executed same as the first example,  will have the title "HomePage" https://riptutorial.com/39 and a paragraph with the content "Hello World".Read Rendering Templates online: https://riptutorial.com/flask/topic/1641/rendering-templateshttps://riptutorial.com/40 Chapter 16: RoutingExamplesBasic RoutesRoutes in Flask can be defined using the  decorator of the Flask application instance:The  decorator takes a string which is the URL to match. When a request for a URL that matches this string is received by the application, the function decorated (also called a view function) will be invoked. So for an about route we would have:It's important to note that these routes are not regular expressions like they are in Django.You can also define variable rules to extract URL segment values into variables:Here the variable rule is in the last segment of the URL. Whatever value is in the last segment of the URL will be passed to the view function () as the  parameter. So a request to  will retrieve (or attempt to retrieve) the blog post with an id of 42.It is also common to reuse URLs. For example maybe we want to have  return a list of all blog posts. So we could have two routes for the same view function:Note here that we also have to supply the default value of  for the  in . When the first route is matched, there will be no value to pass to the view function.Also note that by default the type of a variable rule is a string. However, you can specify several different types such as  and  by prefixing the variable:https://riptutorial.com/41 Flask's built-in URL-converters are:Should we try to visit the URL  with a value in the last URL segment that cannot be converted to an integer, the application would return a 404 error. This is the correct action because there is not a rule with  and a string in the last segment.Finally, routes can be configured to accept HTTP methods as well. The  decorator takes a  keyword argument which is a list of string representing the acceptable HTTP methods for this route. As you might have assumed, the default is  only. If we had a form to add a new blog post and wanted to return the HTML for the  request and parse the form data for the  request, the route would look something like this:The  is found in the  package. Note that when using the  keyword argument, we must be explicit about the HTTP methods to accept. If we had listed only , the route would no longer respond to  requests and return a 405 error.Catch-all routeIt may be useful to have one catch-all view where you handle complex logic yourself based on the path. This example uses two rules: The first rule specifically catches  and the second rule catches arbitrary paths with the built-in  converter. The  converter matches any string (including slashes) See Flask Variable-Ruleshttps://riptutorial.com/42 Routing and HTTP methodsBy default, routes only respond to  requests. You can change this behavior by supplying the  argument to the  decorator.You can also map different functions to the same endpoint based on the HTTP method used.Read Routing online: https://riptutorial.com/flask/topic/2415/routinghttps://riptutorial.com/43 Chapter 17: SessionsRemarksSessions are derived from dictionaries which means they will work with most common dictionary methods.ExamplesUsing the sessions object within a viewFirst, ensure you have imported sessions from flaskTo use session, a Flask application needs a defined SECRET_KEY.Sessions are implemented by default using a cookie signed with the secret key. This ensures that the data is not modified except by your application, so make sure to pick a secure one! A browser will send the cookie back to your application along with each request, enabling the persistence of data across requests.To use a session you just reference the object (It will behave like a dictionary)To release a session variable use pop() method.Example Code:https://riptutorial.com/44 Read Sessions online: https://riptutorial.com/flask/topic/2748/sessionshttps://riptutorial.com/45 Chapter 18: SignalsRemarksFlask supports signals using Blinker. Signal support is optional; they will only be enabled if Blinker is installed.http://flask.pocoo.org/docs/dev/signals/Signals are not asynchronous. When a signal is sent, it immediately executes each of the connected functions sequentially.ExamplesConnecting to signalsUse a signal's  method to connect a function to a signal. When a signal is sent, each connected function is called with the sender and any named arguments the signal provides.See the documentation on built-in signals for information about what arguments they provides. A useful pattern is adding a  argument to catch any unexpected arguments.Custom signalsIf you want to create and send signals in your own code (for example, if you are writing an extension), create a new  instance and call  when the subscribers should be notified. Signals are created using a .https://riptutorial.com/46 Prefer using Flask's signal support over using Blinker directly. It wraps the library so that signals remain optional if developers using your extension have not opted to install Blinker.Read Signals online: https://riptutorial.com/flask/topic/2331/signalshttps://riptutorial.com/47 Chapter 19: Static FilesExamplesUsing Static FilesWeb applications often require static files like CSS or JavaScript files. To use static files in a Flask application, create a folder called  in your package or next to your module and it will be available at  on the application.An example project structure for using templates is as follows:app.py is a basic example of Flask with template rendering.To use the static CSS and JavaScript file in the template index.html, we need to use the special 'static' endpoint name:So, index.html may contain:After running app.py we will see the webpage in http://localhost:5000/.https://riptutorial.com/48 Static Files in Production (served by frontend webserver)Flask's built-in webserver is able to serve static assets, and this works fine for development. However, for production deployments that are using something like uWSGI or Gunicorn to serve the Flask application, the task of serving static files is one that is typically offloaded to the frontend webserver (Nginx, Apache, etc.). This is a small/easy task with smaller apps, especially when all of the static assets are in one folder; for larger apps though, and/or ones that are using Flask plugin(s) that provide static assets, then it can become difficult to remember the locations of all of those files, and to manually copy/collect them into one directory. This document shows how to use the Flask-Collect plugin to simplify that task.Note that the focus of this documentation is on the collection of static assets. To illustrate that functionality, this example uses the Flask-Bootstrap plugin, which is one that provides static assets. It also uses the Flask-Script plugin, which is used to simplify the process of creating command-line tasks. Neither of these plugins are critical to this document, they are just in use here to demonstrate the functionality. If you choose not to use Flask-Script, you will want to review the Flask-Collect docs for alternate ways to call the  command.Also note that configuration of your frontend webserver to serve these static assets is outside of the scope of this doc, you'll want to check out some examples using Nginx and Apache for more info. Suffice it to say that you'll be aliasing URLs that start with "/static" to the centralized directory that Flask-Collect will create for you in this example.The app is structured as follows:First, create your virtual environment and install the required packages: (your-virtualenv) $ pip install flask flask-script flask-bootstrap flask-collect1. Establish the file structure described above:$ touch manage.py; mkdir -p app/{static/{css,js},templates}; touch app/{init.py,static/{css/styles.css,js/main.js}}2. Establish the contents for the , , and  files:3. https://riptutorial.com/49 https://riptutorial.com/50 With those files in place, you can now use the management script to run the app:4. Now, to collect your static assets for the first time. Before doing this, it's worth noting again that you should NOT have a  folder in the top-level of your app; this is where Flask-Collect is going to place all of the static files that it's going to be collecting from your app and the various plugins you might be using. If you do have a  folder in the top level of your app, you should delete it entirely before proceeding, as starting with a clean slate is a critical part of witnessing/understanding what Flask-Collect does. Note that this instruction isn't applicable for day-to-day usage, it is simply to illustrate the fact that Flask-Collect is going to create this directory for you, and then it's going to place a bunch of files in there.5. With that said, you can run the following command to collect your static assets:After doing so, you should see that Flask-Collect has created this top-level  folder, and it contains the following files:And that's it: use the  command whenever you make edits to your app's CSS or JavaScript, or when you've updated a Flask plugin that provides static assets (like Flask-Bootstrap in this example).Read Static Files online: https://riptutorial.com/flask/topic/3678/static-fileshttps://riptutorial.com/51 Chapter 20: TestingExamplesTesting our Hello World appIntroductionIn this minimalist example, using  we're going to test that indeed our Hello World app does return "Hello, World!" with an HTTP OK status code of 200, when hit with a GET request on the URL First let's install  into our virtualenvAnd just for reference, this our hello world app:Defining the testAlong side our , we define a test module called  that is going to be discovered by Just to review, at this point our project structure obtained with the  command is:https://riptutorial.com/52 Running the testNow we can run this test with the  command that will automatically discover our  and the test function inside itYou should see some output and an indication that 1 test has passed, e.g.Testing a JSON API implemented in FlaskThis example assumes you know how to test a Flask app using pytestBelow is an API that takes a JSON input with integer values  and  e.g. , adds them up and returns sum  in a JSON response e.g. .Testing this API with We can test it with https://riptutorial.com/53 Now run the test with  command.Accessing and manipulating session variables in your tests using Flask-TestingMost of the web applications use the session object to store some important information. This examples show how you can test such application using Flask-Testing. Full working example is also available on github.So first install Flask-Testing in your virtualenvTo be able to use the session object you have to set the secret keyLet's imagine you have in your application function that need to store some data in session variables like thisTo test this function you can import flask_testing and let your test class inherit flask_testing.TestCase. Import also all the necessary librariesVery important before you start testing is to implement the function create_app otherwise there will be exception.To test your application is working as wanted you have a couple of possibilities. If you want to just assure your function is setting particular values to a session variable you can just keep the context around and access flask.sessionhttps://riptutorial.com/54 One more useful trick is to differentiate between GET and POST methods like in the next test functionNow imagine your function expects a session variable to be set and reacts different on particular values like thisTo test this function you have to use so called session transaction and open the session in the context of the test client. This function is available since Flask 0.8Running the tests is as usual for unittestAnd in the command lineAnother nice way to run your tests is to use unittest Discovery like this:https://riptutorial.com/55 Read Testing online: https://riptutorial.com/flask/topic/1260/testinghttps://riptutorial.com/56 Chapter 21: Working with JSONExamplesReturn a JSON Response from Flask APIFlask has a utility called  that makes it more convenient to return JSON responsesTry it with Other ways to use Using an existing dictionary:Using a list:Receiving JSON from an HTTP RequestIf the mimetype of the HTTP request is , calling  will return the parsed JSON data (otherwise it returns )https://riptutorial.com/57 Try it with The parameter  specifies that this is a JSON request:To send requests using other HTTP methods, substitute  with the desired method e.g. , , etc.Read Working with JSON online: https://riptutorial.com/flask/topic/1789/working-with-jsonhttps://riptutorial.com/58 CreditsS. NoChaptersContributors1Getting started with Flaskarsho, bakkal, Community, davidism, ettanany, Martijn Pieters, mmenschig, Sean Vieira, Shrike2Accessing request dataRPi Awesomeness3Authorization and authenticationboreq, Ninad Mhatre4BlueprintsAchim Munene, Kir Chou, stamaimer5Class-Based Viewsettanany6Custom Jinja2 Template FiltersCeleo, dylanj.nz7Deploying Flask application using uWSGI web server with NginxGal Dreiman, Tempux, user305883, wimkeir, Wombatz8File Uploadsdavidism, sigmasum9Flask on Apache with mod_wsgiAaron D10Flask-SQLAlchemyAchim Munene, arsho, Matt Davis11Flask-WTFAchim Munene12Message FlashingGrey Li13Paginationhdbuster14Redirectcoralvanda15Rendering Templatesarsho, atayenel, Celeo, fabioqcorreia, Jon Chan, MikeC16Routingdavidism, Douglas Starnes, Grey Li, junnytony, Luke Taylor, MikeC, mmenschig, sytech17Sessionsarsho, PsyKzz, this-vidorhttps://riptutorial.com/59 18Signalsdavidism19Static Filesarsho, davidism, MikeC, YellowShark20Testingbakkal, oggo21Working with JSONbakkal, g3rv4https://riptutorial.com/60